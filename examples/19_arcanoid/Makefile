# Builds main game

APPNAME = arkanoid
ROOTDIR = ../../

# Setup libraries pathes and flags

LIBDIR 		= $(ROOTDIR)lib
LIBAUDIO 	= $(LIBDIR)/audio
LIBWINDOW = $(LIBDIR)/window
LIBMATH 	= $(LIBDIR)/math
LIBRENDER = $(LIBDIR)/render
LIBSYSTEM = $(LIBDIR)/system
LDFLAGS 	= -lwindow -lmath -ldraw -lsystem -laudio	# internal
LDFLAGS  += -lbass -lX11 -lGL -lGLU -lXrandr				# external

# Setup compiler

CXX 			= g++
CXXFLAGS 	= -I $(ROOTDIR) -I .	# see note below
CXXFLAGS += -ansi -pedantic -Wall -Wextra -std=c++14
CXXLIBS  += -L $(LIBAUDIO) -L $(LIBWINDOW)
CXXLIBS  += -L $(LIBMATH) -L $(LIBRENDER) -L $(LIBSYSTEM)
CXXLIBS  += -L /usr/local/lib/
CXXFLAGS += -MP -MMD
DBGFLAGS  = -ggdb3 -DDEBUG -O0
DBGFLAGS += -pg -no-pie															# profiler flags
RLSFLAGS  = -O2

# Setup objects

VPATH = entities/
OBJECTS = logic.o level.o scene.o game_objects.o

# Other stuff

SRCFILES 	= $(wildcard *.cc)
.PHONY: clean

##############################################################################

# Builds game objects (debug or release)

ifeq ($(MAKECMDGOALS), debug)
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(DBGFLAGS) -c $< -o $@
else
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(RLSFLAGS) -c $< -o $@
endif

# Builds main app (release)

$(APPNAME) : $(APPNAME).cc $(OBJECTS)
	make -C $(LIBWINDOW)
	make -C $(LIBMATH)
	make -C $(LIBAUDIO)
	make -C $(LIBRENDER)
	make -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(RLSFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $@

# Builds main app (debug)

debug : $(APPNAME).cc $(OBJECTS)
	make debug -C $(LIBWINDOW)
	make debug -C $(LIBMATH)
	make debug -C $(LIBAUDIO)
	make debug -C $(LIBRENDER)
	make debug -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(DBGFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $(APPNAME)_$@

#############################################################################

# Includes dependicies files early generated by gcc with -MP -MMD opts

-include $(SRCFILES:%.cc=%.d)

# Cleans garbage

lclean :
	rm -rf gmon.out   # profiler out
	rm -rf $(APPNAME) $(APPNAME)_* *.d *.o 

clean :
	rm -rf gmon.out		# profiler out
	rm -rf $(APPNAME) $(APPNAME)_* *.d *.o 
	make clean -C $(LIBWINDOW)
	make clean -C $(LIBMATH)
	make clean -C $(LIBAUDIO)
	make clean -C $(LIBRENDER)
	make clean -C $(LIBSYSTEM)

	# Important note: we have 2 include path - root (for including libraries headers
	# like #include "lib/math/point.h), and current dir (for including game headers
	# like #include "entities/scene.h" or alternatively #include "src/raiders/config.h")
