# Builds main app

APPNAME_1 = trigt_perf
APPNAME_2 = cmath_perf
ROOTDIR = ../../

# Setup libraries pathes and flags

LIBDIR 		= $(ROOTDIR)lib
LIBWINDOW = $(LIBDIR)/window
LIBMATH 	= $(LIBDIR)/math
LIBRENDER = $(LIBDIR)/render
LIBSYSTEM = $(LIBDIR)/system
LDFLAGS 	= -lwindow  -ldraw -lmath -lsystem 				# internal
LDFLAGS  += -lX11 -lGL -lGLU -lXrandr								# external

# Setup compiler

CXX 			= g++
CXXFLAGS 	= -I $(ROOTDIR) -I .											# see note below
CXXFLAGS += -ansi -pedantic -Wall -Wextra -std=c++14
CXXLIBS  += -L $(LIBWINDOW) -L $(LIBMATH)
CXXLIBS  += -L $(LIBRENDER) -L $(LIBSYSTEM)
CXXLIBS  += -L /usr/local/lib/
CXXFLAGS += -MP -MMD
DBGFLAGS  = -ggdb3 -DDEBUG -O0
DBGFLAGS += -pg -no-pie															# profiler flags
RLSFLAGS  = -O2

# Setup objects

VPATH = $(LIBDIR)/data/
# VPATH +=  ../
# OBJECTS = helpers.o

# Other stuff

SRCFILES 	= $(wildcard *.cc)
.PHONY: clean

##############################################################################

# Builds game objects (debug or release)

ifeq ($(MAKECMDGOALS), debug)
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(DBGFLAGS) -c $< -o $@
else
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(RLSFLAGS) -c $< -o $@
endif

# Builds main app_1 (release)

$(APPNAME_1) : $(APPNAME_1).cc $(OBJECTS)
	make -C $(LIBWINDOW)
	make -C $(LIBMATH)
	make -C $(LIBRENDER)
	make -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(RLSFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $@

# Builds main app_2 (release)

$(APPNAME_2) : $(APPNAME_2).cc $(OBJECTS)
	make -C $(LIBWINDOW)
	make -C $(LIBMATH)
	make -C $(LIBRENDER)
	make -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(RLSFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $@

# Builds main app_1 (debug)

debug_1 : $(APPNAME_1).cc $(OBJECTS)
	make debug -C $(LIBWINDOW)
	make debug -C $(LIBMATH)
	make debug -C $(LIBRENDER)
	make debug -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(DBGFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $(APPNAME_1)_$@

# Builds main app_2 (debug)

debug_2 : $(APPNAME_2).cc $(OBJECTS)
	make debug -C $(LIBWINDOW)
	make debug -C $(LIBMATH)
	make debug -C $(LIBRENDER)
	make debug -C $(LIBSYSTEM)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(DBGFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $(APPNAME_2)_$@

#############################################################################

# Includes dependicies files early generated by gcc with -MP -MMD opts

-include $(SRCFILES:%.cc=%.d)

# Cleans garbage (local)

lclean :
	rm -rf gmon.out		# profiler out
	rm -rf $(APPNAME_1) $(APPNAME_1)_* *.d *.o 
	rm -rf $(APPNAME_2) $(APPNAME_2)_* *.d *.o 

# Cleans garbage (all)

clean :
	rm -rf gmon.out
	rm -rf $(APPNAME_1) $(APPNAME_2) $(APPNAME_1)_* $(APPNAME_2)_* *.d *.o 
	make clean -C $(LIBWINDOW)
	make clean -C $(LIBMATH)
	make clean -C $(LIBRENDER)
	make clean -C $(LIBSYSTEM)

	# Important note: we have 2 include path - root (for including libraries headers
	# like #include "lib/math/point.h), and current dir (for including game headers
	# like #include "engine/renderer.h" or alternatively #include "src/raiders/config.h")
