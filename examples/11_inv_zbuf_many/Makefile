# Builds main app

APPNAME = inv_zbuf_many
ROOTDIR = ../../

# Setup libraries pathes and flags

LIBDIR		= $(ROOTDIR)lib
LIBWINDOW = $(LIBDIR)/window
LIBMATH   = $(LIBDIR)/math
LIBRENDER = $(LIBDIR)/render
LIBSYSTEM = $(LIBDIR)/system
LIBEXTRAS = $(LIBDIR)/extras
LIBPHYSICS = $(LIBDIR)/physics
LIBDATA = $(LIBDIR)/data
LDFLAGS   = -lwindow	-ldraw -lmath -lsystem -lextras -lphysics -ldata
LDFLAGS	 += -lX11 -lGL -lGLU -lXrandr -lbass -lbass_fx

# Setup compiler

CXX       = g++
CXXFLAGS  = -I $(ROOTDIR) -I .
CXXFLAGS  += -ansi -pedantic -Wall -Wextra -std=c++14
CXXLIBS   += -L $(LIBWINDOW) -L $(LIBMATH) -L $(LIBRENDER) -L $(LIBPHYSICS)
CXXLIBS   += -L $(LIBSYSTEM) -L $(LIBEXTRAS) -L $(LIBDATA)
CXXLIBS   += -L /usr/local/lib/
CXXFLAGS  += -MP -MMD
DBGFLAGS  = -ggdb3 -DDEBUG -O0
# DBGFLAGS	+= -pg -no-pie
RLSFLAGS  = -O2

# Setup objects

VPATH =	../
OBJECTS = helpers.o

# Other stuff

SRCFILES	 = $(wildcard *.cc)
.PHONY: clean

##############################################################################

# Builds game objects (debug or release)

ifeq ($(MAKECMDGOALS), debug)
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(DBGFLAGS) -c $< -o $@
else
%.o : %.cc %.h
	$(CXX) $(CXXFLAGS) $(RLSFLAGS) -c $< -o $@
endif

# Builds main app (release)

$(APPNAME) : $(APPNAME).cc $(OBJECTS)
	make -C $(LIBWINDOW)
	make -C $(LIBMATH)
	make -C $(LIBRENDER)
	make -C $(LIBSYSTEM)
	make -C $(LIBEXTRAS)
	make -C $(LIBPHYSICS)
	make -C $(LIBDATA)
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(RLSFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $@

# Builds main app (debug)

debug : $(APPNAME).cc $(OBJECTS)
	make debug -C $(LIBWINDOW)
	make debug -C $(LIBMATH)
	make debug -C $(LIBRENDER)
	make debug -C $(LIBSYSTEM)
	make debug -C $(LIBEXTRAS)
	make debug -C $(LIBPHYSICS)
	make debug -C $(LIBDATA)	
	$(CXX) $(CXXFLAGS) $(CXXLIBS) $(DBGFLAGS) $< $(OBJECTS) $(LDFLAGS) -o $(APPNAME)_$@

#############################################################################

# Includes dependicies files early generated by gcc with -MP -MMD opts

-include $(SRCFILES:%.cc=%.d)

# Cleans garbage (local)

lclean :
	rm -rf gmon.out
	rm -rf $(APPNAME) $(APPNAME)_* *.d *.o 

# Cleans garbage (all)

clean :
	rm -rf gmon.out
	rm -rf $(APPNAME) $(APPNAME)_* *.d *.o 
	make clean -C $(LIBWINDOW)
	make clean -C $(LIBMATH)
	make clean -C $(LIBRENDER)
	make clean -C $(LIBSYSTEM)
	make clean -C $(LIBEXTRAS)
	make clean -C $(LIBPHYSICS)
	make clean -C $(LIBDATA)